function gen_roc(save_data,conn,table_name,default_parameters,configs,figure_data)

% Figure settings
figures_folder = 'Figures';
line_val = 2;
mark_val = 10;
font_val = 16;
xlabel_name = "1 - Specificity";
ylabel_name = "Sensitivity";
loc = "southeast";
xlim_vec = [0 0.25];
ylim_vec = [0.75 1];

% Load data from DB and set new frame count
switch save_data.priority
    case "mysql"
        if save_data.save_mysql
            T = mysql_load(conn,table_name,"*");
        elseif save_data.save_excel
            try
                T = readtable(save_data.excel_path, 'TextType', 'string');
            catch
                T = table;
            end
        end
    case "local"
        if save_data.save_excel
            try
                T = readtable(save_data.excel_path, 'TextType', 'string');
            catch
                T = table;
            end
        elseif save_data.save_mysql
            T = mysql_load(conn,table_name,"*");
        end
end

% Import parameters
level_view = figure_data.level_view;
data_type = figure_data.data_type;
primary_var = figure_data.primary_var;
primary_vals = figure_data.primary_vals;
% title_vars = figure_data.title_vars;
legend_vec = figure_data.legend_vec;
line_styles = figure_data.line_styles;
line_colors = figure_data.line_colors;
save_sel = figure_data.save_sel;


% SIM LOOP
var_names = fieldnames(default_parameters);
spec_mat = zeros(length(primary_vals),length(configs));
sens_mat = zeros(length(primary_vals),length(configs));
for primvar_sel = 1:length(primary_vals)

    % Set primary variable
    primval_sel = primary_vals(primvar_sel);

    for sel = 1:length(configs)

        % Populate parameters from configs or default_parameters
        params_inst = struct();
        for var_sel = 1:length(var_names)
            var_name = var_names{var_sel};
            if isfield(configs{sel}, var_name)
                value = configs{sel}.(var_name);
            elseif ~strcmp(var_name, primary_var)
                value = default_parameters.(var_name);
            else
                value = primval_sel;
            end
            params_inst.(var_name) = value;
        end

        % Load data from DB
        [~,paramHash] = jsonencode_sorted(params_inst);
        DB_data = T(string(T.param_hash) == paramHash, :);

        % Select data to extract
        spec_vals = zeros(size(sim_result,1),1);
        sens_vals = zeros(size(sim_result,1),1);
        for i = 1:size(sim_result,1)
            metrics_loaded = jsondecode(sim_result.metrics{i});
            level_view = figure_data.level_view;
            spec_vals(i) = metrics_loaded.(level_view).spec;
            sens_vals(i) = metrics_loaded.(level_view).sens;
        end

        % Select data to extract
        results_inst = jsondecode(DB_data.metrics{1});
        spec_val = mean(sens_vals(~isnan(s_vals)));
        sens_val = mean(spec_vals(~isnan(sens_vals)));

        if isempty(spec_val)
            spec_mat(primvar_sel,sel) = NaN;
        else
            spec_mat(primvar_sel,sel) = spec_val;
        end
        if isempty(sens_val)
            sens_mat(primvar_sel,sel) = NaN;
        else
            sens_mat(primvar_sel,sel) = sens_val;
        end

    end

end

% Create folders if they don't exist
subfolder = fullfile(figures_folder, ['/' char(data_type)]);
subsubfolder = fullfile(subfolder, '/ROC');
if ~exist(figures_folder, 'dir')
    mkdir(figures_folder);
end
if ~exist(subfolder, 'dir')
    mkdir(subfolder);
end
if ~exist(subsubfolder, 'dir')
    mkdir(subsubfolder);
end

% Display figure
figure(1)
hold on
for i = 1:length(configs)
    if sum(1 - spec_mat(:,i)) == 0 && sum(sens_mat(:,i)) == 1 * length(primary_vals)
        x = [0 0 1];
        y = [0 1 1];
    else
        x = 1 - spec_mat(:,i);
        y = sens_mat(:,i);
    end

    plot(x,y, ...
        line_styles{i}, ...
        Color=line_colors{i}, ...
        LineWidth=line_val, ...
        MarkerSize=mark_val)
end

% Set figure settings
xlabel(xlabel_name)
xlim(xlim_vec)
ylabel(ylabel_name)
ylim(ylim_vec)
grid on
legend(legend_vec,Location=loc);
set(gca, 'FontSize', font_val);

% Save figure
timestamp = datetime('now', 'Format', 'yyyyMMdd_HHmmss');
timestamp_str = char(timestamp);
figure_filename = fullfile(subsubfolder, "Figure_" + timestamp_str + ".png");
if save_sel
    saveas(figure(1), figure_filename);
end